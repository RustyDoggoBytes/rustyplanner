// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package sqlc

import (
	"context"
	"time"
)

const getMeal = `-- name: GetMeal :one
SELECT user_id, day, breakfast, snack1, lunch, snack2, dinner
from meals
where day = ?
  AND user_id = ?
`

type GetMealParams struct {
	Day    time.Time
	UserID int64
}

func (q *Queries) GetMeal(ctx context.Context, arg GetMealParams) (Meal, error) {
	row := q.db.QueryRowContext(ctx, getMeal, arg.Day, arg.UserID)
	var i Meal
	err := row.Scan(
		&i.UserID,
		&i.Day,
		&i.Breakfast,
		&i.Snack1,
		&i.Lunch,
		&i.Snack2,
		&i.Dinner,
	)
	return i, err
}

const listMeals = `-- name: ListMeals :many
SELECT user_id, day, breakfast, snack1, lunch, snack2, dinner
FROM meals
WHERE user_id = ?
  AND day >= ?
  AND day <= ?
ORDER BY day
`

type ListMealsParams struct {
	UserID   int64
	StartDay time.Time
	EndDay   time.Time
}

func (q *Queries) ListMeals(ctx context.Context, arg ListMealsParams) ([]Meal, error) {
	rows, err := q.db.QueryContext(ctx, listMeals, arg.UserID, arg.StartDay, arg.EndDay)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Meal
	for rows.Next() {
		var i Meal
		if err := rows.Scan(
			&i.UserID,
			&i.Day,
			&i.Breakfast,
			&i.Snack1,
			&i.Lunch,
			&i.Snack2,
			&i.Dinner,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMeals = `-- name: UpdateMeals :one
INSERT OR
REPLACE INTO meals
    (breakfast, snack1, lunch, snack2, dinner, day, user_id)
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING user_id, day, breakfast, snack1, lunch, snack2, dinner
`

type UpdateMealsParams struct {
	Breakfast string
	Snack1    string
	Lunch     string
	Snack2    string
	Dinner    string
	Day       time.Time
	UserID    int64
}

func (q *Queries) UpdateMeals(ctx context.Context, arg UpdateMealsParams) (Meal, error) {
	row := q.db.QueryRowContext(ctx, updateMeals,
		arg.Breakfast,
		arg.Snack1,
		arg.Lunch,
		arg.Snack2,
		arg.Dinner,
		arg.Day,
		arg.UserID,
	)
	var i Meal
	err := row.Scan(
		&i.UserID,
		&i.Day,
		&i.Breakfast,
		&i.Snack1,
		&i.Lunch,
		&i.Snack2,
		&i.Dinner,
	)
	return i, err
}
