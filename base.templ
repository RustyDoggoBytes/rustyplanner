package main

import (
	"fmt"
	"rustydoggobytes/planner/db"
)

templ Layout() {
	<!DOCTYPE html>
	<html lang="en" class="has-navbar-fixed-bottom">
		<head>
			<meta charset="UTF-8"/>
			<meta
				name="viewport"
				content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"
			/>
			<meta http-equiv="X-UA-Compatible" content="ie=edge"/>
			<title>Rusty Planner</title>
			<script src="/static/js/htmx.min.js"></script>
			<link rel="stylesheet" href="/static/css/bulma.min.css"/>
		</head>
		<body hx-boost="true">
			<header>
				<nav class="navbar is-dark is-fixed-bottom-touch" role="navigation" aria-label="main navigation">
					<div class="navbar-brand">
						<div class="navbar-item">
							RP
						</div>
						<a role="button" class="navbar-burger" aria-label="menu" aria-expanded="false" data-target="navbarBasicExample">
							<span aria-hidden="true"></span>
							<span aria-hidden="true"></span>
							<span aria-hidden="true"></span>
							<span aria-hidden="true"></span>
						</a>
					</div>
					<div class="navbar-menu" id="navbarBasicExample">
						<div class="navbar-end">
							<a class="navbar-item" href="/groceries">
								Groceries
							</a>
							<a class="navbar-item" href="/">
								Meal Plans
							</a>
						</div>
					</div>
				</nav>
			</header>
			<main>
				<div class="container is-fluid">
					{ children... }
				</div>
			</main>
			<footer class="footer has-text-centered">Rusty Doggo Bytes &copy; 2024</footer>
			<script>
			  // Get all "navbar-burger" elements
              const $navbarBurgers = Array.prototype.slice.call(document.querySelectorAll('.navbar-burger'), 0);

              // Add a click event on each of them
              $navbarBurgers.forEach( el => {
                el.addEventListener('click', () => {

                  // Get the target from the "data-target" attribute
                  const target = el.dataset.target;
                  const $target = document.getElementById(target);

                  // Toggle the "is-active" class on both the "navbar-burger" and the "navbar-menu"
                  el.classList.toggle('is-active');
                  $target.classList.toggle('is-active');

                });
              });</script>
		</body>
	</html>
}

templ mealInput(label string, inputName string, inputValue string) {
	<div class="cell field">
		<label class="label" for={ inputName }>{ label }</label>
		<div class="control">
			<input class="input" type="text" name={ inputName } id={ inputName } value={ inputValue }/>
		</div>
	</div>
}

templ MealPlanCardForm(mealPlan db.MealPlan, success bool, err error) {
	<form hx-post={ string(templ.URL(fmt.Sprintf("/meal-plan/%s", FormatDate(mealPlan.Date)))) } hx-target="this" hx-swap="outerHTML">
		<p class="title is-4">
			{ mealPlan.Date.Weekday().String() }
		</p>
		<p class="subtitle is-6">{ FormatMonthDay(mealPlan.Date) }</p>
		<input type="hidden" name="date" value={ FormatDate(mealPlan.Date) }/>
		<div class="grid">
			@mealInput("Breakfast", "breakfast", mealPlan.Breakfast)
			@mealInput("Snack 1", "snack1", mealPlan.Snack1)
			@mealInput("Lunch", "lunch", mealPlan.Lunch)
			@mealInput("Snack 2", "snack2", mealPlan.Snack2)
			@mealInput("Dinner", "dinner", mealPlan.Dinner)
			<div class="cell field">
				<label class="label">&nbsp;</label> <!-- Invisible label -->
				<button class="button is-primary">Save</button>
				if success {
					<p class="help is-success">Saved successfully</p>
				} else if err != nil {
					<p class="help is-danger">Failed. { fmt.Sprint(err) }</p>
				}
			</div>
		</div>
	</form>
}

templ Index(pageData PageData) {
	@Layout() {
		<section class="section">
			<div class="container">
				<h1 class="title">Meal Plan</h1>
				<div class="level"></div>
				<div class="fixed-grid has-4-cols">
					<div class="grid has-text-centered">
						<a href={ templ.URL(fmt.Sprintf("/?start-date=%s", FormatDate(pageData.PreviousWeek))) } class="cell button">Previous</a>
						<p class="cell is-col-span-2 title is-5">
							Week
							<br/>
							{ FormatMonthDay(pageData.WeekStart) } / { FormatMonthDay(pageData.WeekEnd) }
						</p>
						<a href={ templ.URL(fmt.Sprintf("/?start-date=%s", FormatDate(pageData.NextWeek))) } class="cell button">Next</a>
					</div>
				</div>
				for _, mealPlan := range pageData.Meals {
					<div class="content">
						<div class="box">
							@MealPlanCardForm(mealPlan, false, nil)
						</div>
					</div>
				}
			</div>
		</section>
	}
}

templ GroceryListItem(item db.GroceryItem) {
	<a
		class="panel-block"
		hx-put={ string(templ.URL(fmt.Sprintf("/groceries/%d/toggle", item.ID))) }
		hx-swap="outerHTML"
	>
		<input
			type="checkbox"
			if item.Completed {
				checked
			}
		/>
		<span class="mr-auto">
			if !item.Completed {
				{ item.Name }
			} else {
				<s>{ item.Name }</s>
			}
		</span>
		<button
			class="delete"
			hx-delete={ string(templ.URL(fmt.Sprintf("/groceries/%d", item.ID))) }
			hx-target="closest a"
			hx-swap="outerHTML swap:100ms"
		></button>
	</a>
}

templ GroceryList(groceries []db.GroceryItem) {
	@Layout() {
		<section class="section">
			<div class="container">
				<nav class="panel is-black" id="grocery-list">
					<p class="panel-heading">Groceries</p>
					<div class="panel-block">
						<form class="is-fullwidth" hx-post="/groceries" hx-target="#grocery-list" hx-swap="beforeend">
							<div class="field has-addons">
								<div class="control is-expanded">
									<input class="input" type="text" name="name" id="grocery-input" placeholder="Add a new item"/>
								</div>
								<div class="control">
									<button class="button is-primary" hx-post="/groceries" hx-on::after-request="clearAndFocus(event)">Add</button>
								</div>
							</div>
						</form>
					</div>
					for _, item := range groceries {
						@GroceryListItem(item)
					}
				</nav>
			</div>
		</section>
		<script type="text/javascript">
            const $input = document.getElementById('grocery-input');
            document.addEventListener('DOMContentLoaded', function() {
                $input.focus();
            });

            function clearAndFocus(event) {
                if (event.detail.successful) {
                  $input.value = '';
                  // Delay focus for iOS devices
                  setTimeout(function() {
                      $input.focus();
                      // Scroll to the input if needed
                      $input.scrollIntoView({behavior: "smooth", block: "center"});
                  }, 100);
                }
            }
        </script>
	}
}
